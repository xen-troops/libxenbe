/*
 *  Xen gnttab wrapper
 *  Copyright (c) 2016, Oleksandr Grytsov
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 */

#ifndef SRC_XEN_XENGNTTAB_HPP_
#define SRC_XEN_XENGNTTAB_HPP_

#include <sys/mman.h>

extern "C" {
#include <xenctrl.h>
#include <xengnttab.h>
}

#include "Exception.hpp"
#include "Log.hpp"

namespace XenBackend {

/***************************************************************************//**
 * Exception generated by XenGbttab.
 * @ingroup xen
 ******************************************************************************/
class XenGnttabException : public Exception
{
	using Exception::Exception;
};

/***************************************************************************//**
 * Keeps common grant table handle.
 * @ingroup xen
 ******************************************************************************/
class XenGnttab
{
private:

	friend class XenGnttabBuffer;

	XenGnttab();
	XenGnttab(const XenGnttab&) = delete;
	XenGnttab& operator=(XenGnttab const&) = delete;
	~XenGnttab();

	/**
	 * Returns the grant table handle
	 * @return handle
	 */
	xengnttab_handle* getHandle() const { return mHandle; }

	xengnttab_handle* mHandle;
};

/***************************************************************************//**
 * Gran table buffer.
 * XenGnttabBuffer instance maps grant table reference(s) into local linear
 * buffer when constructed. Then address and size of the linear buffer can
 * be accessible by get() and size() methods.
 * @code
 * XenGnttabBuffer buffer(domId, ref);
 *
 * memcpy(buffer.get(), data, size);
 *
 * ...
 *
 * @endcode
 * @ingroup xen
 ******************************************************************************/
class XenGnttabBuffer
{
public:

	/**
	 * @param[in] domId domain id
	 * @param[in] ref   grant reference id
	 * @param[in] prot  same flag as in mmap()
	 */
	XenGnttabBuffer(domid_t domId, grant_ref_t ref,
					int prot = PROT_READ | PROT_WRITE);

	/**
	 * @param[in] domId domain id
	 * @param[in] refs  array of grant reference ids
	 * @param[in] count number of grant refgerence ids
	 * @param[in] prot  same flag as in mmap()
	 */
	XenGnttabBuffer(domid_t domId, const grant_ref_t* refs, size_t count,
					int prot = PROT_READ | PROT_WRITE);
	XenGnttabBuffer(const XenGnttabBuffer&) = delete;
	XenGnttabBuffer& operator=(XenGnttabBuffer const&) = delete;
	~XenGnttabBuffer();

	/**
	 * Returns pointer to the mapped buffer.
	 */
	void* get() const { return mBuffer; }

	/**
	 * Returns sizeo of the mapped buffer.
	 */
	size_t size() const { return mCount * XC_PAGE_SIZE; }

private:
	void* mBuffer;
	xengnttab_handle* mHandle;
	size_t mCount;
	Log mLog;


	void init(domid_t domId, const grant_ref_t* refs, size_t count, int prot);
	void release();
};

}

#endif /* SRC_XEN_XENGNTTAB_HPP_ */

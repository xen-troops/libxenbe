/*
 *  Xen evtchn wrapper
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Copyright (C) 2016 EPAM Systems Inc.
 */

#ifndef XENBE_XENEVTCHN_HPP_
#define XENBE_XENEVTCHN_HPP_

#include <atomic>
#include <mutex>
#include <thread>

extern "C" {
#include <xenctrl.h>
#include <xenevtchn.h>
}

#include "Exception.hpp"
#include "Log.hpp"
#include "Utils.hpp"

namespace XenBackend {

/***************************************************************************//**
 * @defgroup xen Xen
 * Contains classes, primitives and helpers for Xen tools.
 ******************************************************************************/

/***************************************************************************//**
 * Exception generated by XenEvtchn.
 * @ingroup xen
 ******************************************************************************/
class XenEvtchnException : public Exception
{
	using Exception::Exception;
};

/***************************************************************************//**
 * Implements xen event channel.
 * XenEvtchn instance binds port and waits for the bound channel is notified.
 * When the channel is notified it calls the callback function passed as
 * argument to the XenEvtchn constructor.
 *
 * @code
 * void eventChannelCbk()
 * {
 *     // handle the event channel notification
 *
 *     ...
 * }
 *
 * XenEvtchn eventChannel(domId, port, eventChannelCbk);
 *
 * ...
 *
 * @endcode
 * @ingroup xen
 ******************************************************************************/
class XenEvtchn
{
public:

	/**
	 * Callback which is called when the event channel is notified
	 */
	typedef std::function<void()> Callback;

	/**
	 * @param[in] domId domain id
	 * @param[in] port  event channel port number
	 * @param[in] callback callback which is called when the notification is
	 * received
	 * @param[in] errorCallback callback which is called when an error occurs
	 */
	XenEvtchn(domid_t domId, evtchn_port_t port, Callback callback,
			  ErrorCallback errorCallback = nullptr);
	XenEvtchn(const XenEvtchn&) = delete;
	XenEvtchn& operator=(XenEvtchn const&) = delete;
	~XenEvtchn();

	/**
	 * Starts listening to the event channel
	 */
	void start();

	/**
	 * Stops listening to the event channel
	 */
	void stop();

	/**
	 * Notifies the event channel
	 */
	void notify();

	/**
	 * Returns event channel port
	 */
	xenevtchn_port_or_error_t getPort() const { return mPort; }

	/**
	 * Sets error callback
	 * @param errorCallback error callback
	 */
	void setErrorCallback(ErrorCallback errorCallback);

private:

	xenevtchn_port_or_error_t mPort;
	xenevtchn_handle *mHandle;
	Callback mCallback;
	ErrorCallback mErrorCallback;
	std::atomic_bool mStarted;
	Log mLog;

	std::mutex mMutex;
	std::thread mThread;
	std::unique_ptr<PollFd> mPollFd;

	void init(domid_t domId, evtchn_port_t port);
	void release();
	void eventThread();
};

}

#endif /* XENBE_XENEVTCHN_HPP_ */
